#!/bin/sh
# SPDX-License-Identifier: 0BSD
main () {
    case "${0}" in
        *'/zig' | 'zig') wrap-zig "${@}" ;;
    esac
    usage
}

usage () { printf 'Usage: %s [command] [options]\nCommands:%s' "${0}" '
  default  configure the default Zig version
  install  install a specific Zig version
  pin      create aliases and protect Zig versions from deletion
  query    list installed Zig versions and check for updates
  remove   remove specified Zig version(s)
  run      invoke specified Zig version
  update   update Zig installation based on preferences
' >&2 && exit; }

require () {
    while [ "${#}" -gt 0 ]; do
        type "${1}" >&- && shift && continue
        printf 'missing dependency: %s\n' "${1}" >&2 && exit 1
    done
}

wrap-zig () {
    case "${1}" in
        '+'*) read-alias "${1#?}" && shift ;;
        *) read-alias default ;;
    esac
    [ -x "${root_path}/store/zig/${version}/${zig}" ] && {
        "${root_path}/store/zig/${version}/${zig}" "${@}"
        exit
    }
    printf 'unknown version identifier: %s\n' "${version}" >&2
    exit 1
}

zig=zig
system=unknown
type uname >&- && \
case "$(uname)" in
    'Windows'* | 'MSYS'* | 'MINGW'* | 'CYGWIN'*)
        system=windows
        zig=zig.exe ;;
    'Darwin'*)
        system=macos ;;
    'NetBSD'*)
        system=netbsd ;;
    'FreeBSD'*)
        system=freebsd ;;
    'OpenBSD'*)
        system=openbsd ;;
    'DragonFly'*)
        system=dragonflybsd ;;
    'SunOS'*)
        system=solaris ;;
    'Linux'*)
        system=linux ;;
esac

if [ -n "${KZDL_ROOT}" ]; then
    root_path=${KZDL_ROOT}
elif [ -n "${XDG_DATA_HOME}" ]; then
    root_path=${XDG_DATA_HOME}/kzdl
else
    case "${system}" in
        'macos')
            root_path=${HOME}/Library/'Application Support'/kzdl ;;
        'windows')
            root_path=${LOCALAPPDATA}/kzdl ;;
        *)
            root_path=${HOME}/.local/share/kzdl ;;
    esac
fi

main
