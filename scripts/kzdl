#!/bin/sh
# SPDX-License-Identifier: 0BSD
set -Cu
ver='0.1.0'

# Make it easier to pipe things to /dev/null.
exec 9<>/dev/null

# Programs tend to blindly attempt to write to these file descriptors and break.
[ -e /dev/fd/0 ] || exec 0<&9
[ -e /dev/fd/1 ] || exec 1>&9
[ -e /dev/fd/2 ] || exec 2>&9

# `exename` is used to behave differently depending on how we are symlinked.
# `exepath` is printed in usage text and mimics other CLIs' output text.
exename=${0##*'/'}
if exepath=$(command -v -- "${exename}" && printf 'n'); then
    [ "${exepath%?}" = "${0}" ] && exepath=${exename}
else
    exepath=${0}
fi
exename=${exename%'.sh'}

# Takes a series of argument pairs:
#   ${1} = command to check existence of
#   ${2} = why missing command is required
require_dep () {
    [ "$((${#} % 2))" -eq 1 ] && {
        printf 'kzdl internal bug: odd number of arguments to require_dep\n' >&2
        exit 1
    }
    unset -v message
    while [ "${#}" -gt 0 ]; do
        type "${1}" >&9 || message="${message-}  ${1} - ${2}
";      shift 2
    done
    [ -z "${message+n}" ] || {
        printf 'kzdl: Mising dependencies: \n%s' "${message}" >&2
        return 1
    }
}

# Check for required dependencies; print error if any are missing.
type jq cat mktemp mkfifo rm >&9 || {
    # If we're invoked normally, at the very least implement the two most basic
    # CLI functions: non-argument usage text and --version.
    [ "${exename}" = 'kzdl' ] && {
        [ "${#}" -eq 0 ] && {
            printf 'Usage: %s [command] [options]\n%s\n' "${exepath}" \
                "See \`${exepath} --help\` for detailed usage information" >&2
            exit 1
        }
        [ "${#}" -eq 1 ] && [ "${1}" = '--version' -o "${1}" = '-V' ] && {
            printf '%s\n' "${ver}"
            exit
        }
    }
    # Outside of the above simple cases, print a useful dependency error.
    require_dep \
        'jq' 'most of kzdl is written in jq' \
        'cat' 'required for piping file contents' \
        'mktemp' 'required to store named pipes' \
        'mkfifo' 'required to create named pipes' \
        'rm' 'required to clean up temporary state' \
    || exit
}

# Set up our temporary environment and jq communication pipes.
set -e
trap 'exec 3<&-; kill %2 2>&9; wait; rm -rf -- "${tmpdir}"; exit 130' INT
trap 'exec 3<&-; kill %2 2>&9; wait; rm -rf -- "${tmpdir}"; exit 143' TERM
tmpdir=$(mktemp -d)
jq_stdin="${tmpdir}/jq_stdin"
jq_stdout="${tmpdir}/jq_stdout"
mkfifo -- "${jq_stdin}" "${jq_stdout}"

# Start jq background process, allowing it to drive further execution.
jq -Rr -L "${tmpdir}" --unbuffered \
    --from-file /dev/fd/3 \
    --arg exename "${exename}" \
    --arg exepath "${exepath}" \
    --arg tmp "${tmpdir}" \
    --arg ver "${ver}" \
    --args -- "${@}" \
    <"${jq_stdin}" >"${jq_stdout}" 3<<'JQ_SCRIPT' &
    { args: $ARGS.positional } |

    # Run the requested filter only for non-string inputs.
    def N(f):
        strings // f;

    # Read an input, halting with an error if this is not possible.
    def try_input:
        "Interrupted!\n" | input? // halt_error(1);

    # Read the output of `cat -n` as a stream of lines.
    def read_lines:
        try_input | while(length >= 1; try_input) | sub("^ *\\d+\\t"; "");

    # Generate shell-escaped printf command argv.
    def printf:
        reduce
            capture("(?<nul>\\0)|(?<newline>\\n)|(?<str>[^\\0\\n]+)"; "g")
        as $capture (
            [""]; first(
                (select($capture.nul) | .[0] += "\\0"),
                (select($capture.newline) | .[0] += "\\n"),
                (.[0] += "%s") + [$capture.str|@sh]
            )
        ) | .[0] |= @sh;

    # Run the input shell command; set `.status` to its exit status.
    def cmd_status($cmd):
        $cmd, @sh "printf \("%s\\n") \"${?}\" >&3",
        .status = (try_input|tonumber);

    # Run the input shell command; set `.output` to stdout and `.status` to exit status.
    def cmd_output($cmd):
        "{ { \($cmd)\n
                printf \("\\n%s\\n"|@sh) \"${?}\"
            } | cat -n; printf \("\\n"|@sh)
        } >&3", (
            . + reduce read_lines as $line ({};
                (.output|values) += "\n"
                | .output += .status
                | .status = $line
            ) | .status |= tonumber
        );

    # Check whether $cmd exists in ${PATH}; set `.exists` to the result.
    def require_cmd($cmd):
        cmd_status(@sh "type \($cmd) >&9") | N(.exists = .status == 0);

    # Prompt the user to enter 'y' or 'n'; set `.confirm` to the result.
    def prompt_user($default; $prompt):
        (
            if $default then " [Y/n] " else " [y/N] " end |
            @sh "{
                response=yes
                [ -t 0 ] && {
                    printf \("%s") \($prompt + .) >&2
                    IFS= read -r response
                }
                printf \("%s\\n") \"${response}\" >&3
            } <&7"
        ), (
            .confirm = (
                input? // ("\nInterrupted!\n"|halt_error(1)) |
                first(
                    (select(length == 0)|$default),
                    (test("^no*$"; "i")|select(.)|not),
                    test("^y(?:es?)?$"; "i") // null
                )
            )
        );

    # Shorthands of the above to provide useful defaults.
    def prompt_user($default):
        prompt_user($default; "Do you wish to continue?");
    def prompt_user:
        prompt_user(true);

    # Store the current OS and architecture in `.system`.
    def get_system:
        require_cmd("uname") | N(
            if .exists then
                cmd_output("uname") | N(
                    def case($a; f):
                        select(startswith($a))|$a|f;
                    .system = {
                        os: first(
                            .output |
                            case("Linux", "Windows", "NetBSD", "FreeBSD", "OpenBSD"; ascii_downcase),
                            case("MSYS", "MINGW", "CYGWIN"; "windows"),
                            case("DragonFly"; "dragonflybsd"),
                            case("SunOS"; "solaris"),
                            null
                        )
                    }
                ) | N(cmd_output("uname -m"))
                | N(.system.arch = (.output[:-1]|ascii_downcase))
                | N(.system |= (.double = "\(.arch)-\(.os)"))
            else
                .system = {os: null, arch: null, double: null}
            end
        );

    # Script entry point; current just a testbed for the above functions.
    def main:
        get_system | N(prompt_user) | N(
            if .confirm then
                @sh "printf \("Your system is: %s\\n") \(.system.double) >&2"
            else
                @sh "printf \("Canceled!\\n") >&2"
            end
        );
    main, "exec 3<&-" | printf | join(" ")
JQ_SCRIPT
exec 3>"${jq_stdin}"
printf '\n' >&3
set +e

# Eval everything the jq script tells us to.
status=0
while IFS= read -r evalstr; do
    eval 'eval "$(printf '"${evalstr}"')"'
done 7<&0 <"${jq_stdout}"

# Clean up temporary directory and exit as appropriate.
rm -rf -- "${tmpdir}"
exit "${status}"
