#!/bin/sh
# SPDX-License-Identifier: 0BSD
. "${SHRC}/util"

# Create directory to store Zig downloads in.
try mkdir -p -- "${HOME}/.local/store"
try cd -- "${HOME}/.local/store"

# Retrieve architecture and operating system with uname.
try_set os uname -s
try_set arch uname -m

# Normalize operating system identifier into format used by download index.
case "${os}" in
    [Ll]inux) os=linux ;;
    [Dd]arwin) os=macos ;;
    [Ww]indows* | CYGWIN* | MINGW* | MSYS*) os=windows ;;
    [Dd]ragon[Ff]ly*) os=dragonflybsd ;;
    [Ff]ree[Bb][Ss][Dd]*) os=freebsd ;;
    [Oo]pen[Bb][Ss][Dd]*) os=openbsd ;;
    [Nn]et[Bb][Ss][Dd]*) os=netbsd ;;
    *) printf 'Unrecognized operating system.\n' >&2 && exit 1 ;;
esac

# Normalize architecture identifier into format used by download index.
case "${arch}" in
    x86_64 | amd64) arch=x86_64 ;;
    x86 | i[36]86 | i86pc) arch=i386 ;;
    aarch64 | arm64) arch=aarch64 ;;
    armv7*) arch=armv7a ;;
    riscv64) arch=riscv64 ;;
    *) printf 'Unrecognized CPU architecture.\n' >&2 && exit 1 ;;
esac

# Obtain the version number and tarball download URL for latest master build.
version=$(
    try curl -sf 'https://ziglang.org/download/index.json' | \
    jq -r '.master | {
        version: (.version //
            error("Download index does not contain version")),
        tarball: (."'"${arch}-${os}"'".tarball //
            error("Download index does not contain tarball for target '"'${arch}-${os}'"'")),
    } | @sh "version=\(.version)\nversion=${version%'"'+'"'*}\ntarball=\(.tarball)"'
) || exit
eval "${version}"

# Determine the directory to download this version of Zig in. Do not perform
# the download if the directory exists (i.e. latest version already installed).
target_dir="zig-${version}"
zip_name=${tarball##'/'}
[ -e "${target_dir}" ] && {
    [ "${1}" != '--force' ] && {
        printf 'The latest version of Zig is already installed.\n' "${version}" >&2; exit
    }
    try rm -rf "${target_dir}"
}

# Download and extract the archive containing the Zig install.
try mkdir -p "${target_dir}"
(
    try curl -f "${tarball}" | \
    if [ "${os}" = 'windows' ]; then
        unzip -d "${target_dir}" - "${zip_name%'.zip'}/*"
    else
        tar --directory "${target_dir}" --strip-components 1 -Jx
    fi
) || {
    rmdir "${target_dir}"
    exit 1
}

# Symlink version-specific folder to 'zig' for convenience.
[ \( ! -e 'zig' \) -o \( -h 'zig' \) ] && \
    try ln -Tsf "${target_dir}" 'zig'

# Symlink Zig executable to ~/.local/bin/zig, which should be in PATH.
try mkdir -p -- "${HOME}/.local/bin"
try cd -- "${HOME}/.local/bin"
[ \( ! -e 'zig' \) -o \( -h 'zig' \) ] && \
    try ln -Tsf "../store/${target_dir}/zig" 'zig'

# Symlink Zig lib folder to ~/.local/lib/zig so the Zig executable can find it.
try mkdir -p "${HOME}/.local/lib"
try cd -- "${HOME}/.local/lib"
lib_dir="../store/${target_dir}/lib"
[ -e "${lib_dir}/zig" ] && \
    lib_dir="${lib_dir}/zig"
[ \( ! -e 'zig' \) -o \( -h 'zig' \) ] && \
    try ln -Tsf "${lib_dir}" 'zig'
