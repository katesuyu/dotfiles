# SPDX-License-Identifier: 0BSD

# Bootstrap the plugin manager, loading its commands and kakrc highlighting.
nop %sh{
    [ ! -e "${kak_config}/plugins/plug.kak" ] && \
    mkdir -p "${kak_config}/plugins" && \
    git clone 'https://github.com/robertmeta/plug.kak.git' "${kak_config}/plugins/plug.kak" >&2
}
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "robertmeta/plug.kak" noload

# The best colorscheme ever (this is 100% totally unbiased).
plug "katesuyu/joule.kak" theme config %{
    colorscheme joule
}

# Syntax and indentation hook support for the zzz data format.
plug "katesuyu/zzz.kak"

# Kakoune language server protocol support.
plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    # Re-activate my chosen colorscheme because kak-lsp overrides some faces.
    colorscheme joule

    # Generate config for kak-lsp and the Zig language server.
    nop %sh{
        # ${1} = file to overwrite
        # ${2} = contents to write
        # Only write to file if nonexistent or contents are outdated.
        overwrite () {
            { [ -e "${1}" ] && printf '%s\n' "${2}" | diff -s -- - "${1}" >/dev/null; } || \
                printf '%s\n' "${2}" >"${1}"
        }
        lsp_config=$(
            sed '/^\[semantic_tokens\]$/a\
tagField = "function"\
errorTag = "function"\
field = "function"\
parameter = "variable"
                /^\[semantic_modifiers\]$/c[semantic_token_modifiers]\
namespace = "module"
                $a\
\
[language.zig]\
filetypes = ["zig"]\
roots = ["build.zig"]\
command = """'"$(printf '%s' "${HOME}/.local/zls/bin/zls" | sed 's/\\/\\\\/g;s/"/\\"/g;s/\r/\\r/g')"'"""
            ' <"${kak_config}/plugins/kak-lsp/kak-lsp.toml"
        ) && overwrite "${kak_config}/kak-lsp.toml" "${lsp_config}"
        zls_config=$(
            zig_exe_path="${HOME}/.local/zig/zig" \
            zig_lib_path="${HOME}/.local/zig/lib/zig" \
            build_runner_path="${HOME}/.local/zls/bin/build_runner.zig" \
            jq -n --indent 4 '{
                warn_style: false,
                enable_snippets: false,
                operator_completions: false,
                enable_semantic_tokens: true,
                zig_exe_path: env.zig_exe_path,
                zig_lib_path: env.zig_lib_path,
                build_runner_path: env.build_runner_path,
            }'
        ) && overwrite "${HOME}/.config/zls.json" "${zls_config}"
    }

    # Manually point kak-lsp to my custom config location.
    set-option global lsp_cmd %sh{
        printf "%s -c '" "${kak_opt_lsp_cmd}"
        printf "%s" "${kak_config}/kak-lsp.toml" | sed "s/'/'\\\\''/g"
        printf "'"
    }

    # Enable Zig language server + semantic tokens.
    hook global WinSetOption filetype=(zig) %{
        map -docstring 'format document (zls)' window user 'f' ': lsp-formatting<ret>'
        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
            unmap window user 'f' ': lsp-formatting<ret>'
            remove-hooks window semantic-tokens
        }
        lsp-enable-window
    }
    hook global KakEnd .* lsp-exit

    # Add kakrc highlighting for the kak-lsp's commands.
    try %{
        require-module kak
        try %{
            add-highlighter shared/kakrc/code/lsp_keywords regex '\blsp((-| )(\w|-)+)?\b' 0:keyword
        } catch %{
            echo -debug "kak-lsp: Can't declare highlighters for 'kak' filetype."
            echo -debug "         Detailed error: %val{error}"
        }
    }
}

# Keybind to comment/uncomment selected lines.
map -docstring 'comment out selected lines' global normal '#' ': comment-line<ret>'

# User mappings to copy/paste with xclip.
evaluate-commands %sh{
    if type xclip >/dev/null; then
        copy_cmd='xclip -selection clipboard'
        paste_cmd='xclip -o -selection clipboard'
    elif type termux-clipboard-get >/dev/null; then
        copy_cmd='termux-clipboard-set'
        paste_cmd='termux-clipboard-get'
    else
        exit 0
    fi

cat <<EOF
    define-command -hidden xclip-copy-internal %{
        execute-keys '<a-|>${copy_cmd}<ret>'
    }

    define-command -hidden xclip-paste-internal -params 1 %{
        evaluate-commands -save-regs '"' %{
            edit -scratch
            set-register '"'
            try %{
                execute-keys -draft -save-regs /| \
                '!${paste_cmd}<ret>gg/..<ret>%Hy'
            }
            delete-buffer
            execute-keys "%val{count}%arg{1}"
        }
    }

    map -docstring 'copy selection to X clipboard' global user 'y' \
        ': xclip-copy-internal<ret>'

    map -docstring 'delete selection and copy to X clipboard' global user 'd' \
        ': xclip-copy-internal<ret><a-d>'

    map -docstring 'paste from X clipboard (append)' global user 'p' \
        ': xclip-paste-internal p<ret>'

    map -docstring 'paste from X clipboard (prepend)' global user 'P' \
        ': xclip-paste-internal P<ret>'

    map -docstring 'paste from X clipboard (replace)' global user 'R' \
        ': xclip-paste-internal R<ret>'
EOF
}

# Handles soft tabbing better than the naive approach.
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global WinSetOption filetype=.* expandtab
    hook global WinSetOption filetype=(zzz) %{
        require-module smarttab
        set-option buffer softtabstop 2
        set-option buffer indentwidth 2
        hook -once -always window WinSetOption filetype=.* %{
            unset-option buffer softtabstop
            unset-option buffer indentwidth
        }
    }
}

# https://github.com/mawww/kakoune/wiki/Indentation-and-Tabulation
# Use <tab> for completions while completion menu is open.
hook global InsertCompletionShow .* %{
    try %{
        # This command temporarily removes cursors preceded by whitespace; if
        # there are no cursors left, it raises an error, does not continue to
        # execute the mapping commands, and the error is eaten by the `try`
        # command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'

        # Use <tab> and <s-tab> to cycle through completions.
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>

        # Allow me to use <a-tab> to indent even with completion menu open.
        hook window -group force-indent InsertKey <a-tab> %{
            execute-keys -itersel -with-maps -with-hooks '<c-o><tab><c-o>'
        }
    }
}

# Use <tab> for indentation when completion menu is closed.
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
    remove-hooks window force-indent
}

# Make current directory relative to current file.
hook global WinDisplay .* %{
    evaluate-commands %sh{
        case "${kak_buffile}" in
            '*'*'*') ;;
            *) printf "try 'change-directory ''"
            dirname "${kak_buffile}" | head -c -1 | sed "s/'/''''/g"
            printf "'''\n" ;;
        esac
    }
}
hook global BufWritePost .* %{
    evaluate-commands %sh{
        case "${kak_buffile}" in
            '*'*'*') ;;
            *) printf "try 'change-directory ''"
            dirname "${kak_buffile}" | head -c -1 | sed "s/'/''''/g"
            printf "'''\n" ;;
        esac
    }
}

# Helps with readability, and is consistent with variable substitution.
hook global WinSetOption filetype=(sh|kak) %{
    set-face window variable value
    hook -once -always window WinSetOption filetype=.* %{
        unset-face variable
    }
}

# Mcmeta is just a json file with a different extension.
hook global BufCreate .*[.]mcmeta %{
    set-option buffer filetype json
}

# Enable line numbers and soft-wrapping.
add-highlighter global/ number-lines -hlcursor
add-highlighter global/ wrap -word -indent

# Disable assistant for cleaner interface. Nothing personal.
set-option -add global ui_options ncurses_assistant=none

# Load other scripts but don't let errors in one break the whole editor.
evaluate-commands %sh{
    for file in "${kak_config}/rc/"*'.kak'; do
        printf "try 'source ''"
        printf '%s' "${file}" | sed "s/'/''''/g"
        printf "'''\n"
    done
}
